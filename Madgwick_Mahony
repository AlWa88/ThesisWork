// Implementation of Sebastian Madgwick's "...efficient orientation filter for... inertial/magnetic sensor arrays"
// (see http://www.x-io.co.uk/category/open-source/ for examples and more details)
// which fuses acceleration, rotation rate, and magnetic moments to produce a quaternion-based estimate of absolute
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float *q, float deltat)
        {
            // float q[0] = q[0], q[1] = q[1], q[2] = q[2], q[3] = q[3];   // short name local variable for readability
            float norm;
            float hx, hy, _2bx, _2bz;
            float s1, s2, s3, s4;
            float qDot1, qDot2, qDot3, qDot4;
 
            // Auxiliary variables to avoid repeated arithmetic
            float _2q1mx;
            float _2q1my;
            float _2q1mz;
            float _2q2mx;
            float _4bx;
            float _4bz;
            float _2q1 = 2.0f * q[0];
            float _2q2 = 2.0f * q[1];
            float _2q3 = 2.0f * q[2];
            float _2q4 = 2.0f * q[3];
            float _2q1q3 = 2.0f * q[0] * q[2];
            float _2q3q4 = 2.0f * q[2] * q[3];
            float q1q1 = q[0] * q[0];
            float q1q2 = q[0] * q[1];
            float q1q3 = q[0] * q[2];
            float q1q4 = q[0] * q[3];
            float q2q2 = q[1] * q[1];
            float q2q3 = q[1] * q[2];
            float q2q4 = q[1] * q[3];
            float q3q3 = q[2] * q[2];
            float q3q4 = q[2] * q[3];
            float q4q4 = q[3] * q[3];
 
            // Normalise accelerometer measurement
            norm = sqrt(ax * ax + ay * ay + az * az);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f/norm;
            ax *= norm;
            ay *= norm;
            az *= norm;
 
            // Normalise magnetometer measurement
            norm = sqrt(mx * mx + my * my + mz * mz);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f/norm;
            mx *= norm;
            my *= norm;
            mz *= norm;
 
            // Reference direction of Earth's magnetic field
            _2q1mx = 2.0f * q[0] * mx;
            _2q1my = 2.0f * q[0] * my;
            _2q1mz = 2.0f * q[0] * mz;
            _2q2mx = 2.0f * q[1] * mx;
            hx = mx * q1q1 - _2q1my * q[3] + _2q1mz * q[2] + mx * q2q2 + _2q2 * my * q[2] + _2q2 * mz * q[3] - mx * q3q3 - mx * q4q4;
            hy = _2q1mx * q[3] + my * q1q1 - _2q1mz * q[1] + _2q2mx * q[2] - my * q2q2 + my * q3q3 + _2q3 * mz * q[3] - my * q4q4;
            _2bx = sqrt(hx * hx + hy * hy);
            _2bz = -_2q1mx * q[2] + _2q1my * q[1] + mz * q1q1 + _2q2mx * q[3] - mz * q2q2 + _2q3 * my * q[3] - mz * q3q3 + mz * q4q4;
            _4bx = 2.0f * _2bx;
            _4bz = 2.0f * _2bz;
 
            // Gradient decent algorithm corrective step
            s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q[2] * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q[3] + _2bz * q[1]) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q[2] * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q[1] * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q[3] * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q[2] + _2bz * q[0]) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q[3] - _4bz * q[1]) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q[2] * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q[2] - _2bz * q[0]) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q[1] + _2bz * q[3]) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q[0] - _4bz * q[2]) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q[3] + _2bz * q[1]) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q[0] + _2bz * q[2]) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q[1] * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
            norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
            norm = 1.0f/norm;
            s1 *= norm;
            s2 *= norm;
            s3 *= norm;
            s4 *= norm;
 
            // Compute rate of change of quaternion
            qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz) - beta * s1;
            qDot2 = 0.5f * (q[0] * gx + q[2] * gz - q[3] * gy) - beta * s2;
            qDot3 = 0.5f * (q[0] * gy - q[1] * gz + q[3] * gx) - beta * s3;
            qDot4 = 0.5f * (q[0] * gz + q[1] * gy - q[2] * gx) - beta * s4;
 
            // Integrate to yield quaternion
            q[0] += qDot1 * deltat;
            q[1] += qDot2 * deltat;
            q[2] += qDot3 * deltat;
            q[3] += qDot4 * deltat;
            norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);    // normalise quaternion
            norm = 1.0f/norm;
            q[0] = q[0] * norm;
            q[1] = q[1] * norm;
            q[2] = q[2] * norm;
            q[3] = q[3] * norm;
 
        }
  
 // Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
 // measured ones. 
           void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float q, float deltat, float Kp, float Ki)
        {
            float q[0] = q[0], q[1] = q[1], q[2] = q[2], q[3] = q[3];   // short name local variable for readability
            float norm;
            float hx, hy, bx, bz;
            float vx, vy, vz, wx, wy, wz;
            float ex, ey, ez;
            float pa, pb, pc;
 
            // Auxiliary variables to avoid repeated arithmetic
            float q1q1 = q[0] * q[0];
            float q1q2 = q[0] * q[1];
            float q1q3 = q[0] * q[2];
            float q1q4 = q[0] * q[3];
            float q2q2 = q[1] * q[1];
            float q2q3 = q[1] * q[2];
            float q2q4 = q[1] * q[3];
            float q3q3 = q[2] * q[2];
            float q3q4 = q[2] * q[3];
            float q4q4 = q[3] * q[3];   
 
            // Normalise accelerometer measurement
            norm = sqrt(ax * ax + ay * ay + az * az);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f / norm;        // use reciprocal for division
            ax *= norm;
            ay *= norm;
            az *= norm;
 
            // Normalise magnetometer measurement
            norm = sqrt(mx * mx + my * my + mz * mz);
            if (norm == 0.0f) return; // handle NaN
            norm = 1.0f / norm;        // use reciprocal for division
            mx *= norm;
            my *= norm;
            mz *= norm;
 
            // Reference direction of Earth's magnetic field
            hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
            hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
            bx = sqrt((hx * hx) + (hy * hy));
            bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
 
            // Estimated direction of gravity and magnetic field
            vx = 2.0f * (q2q4 - q1q3);
            vy = 2.0f * (q1q2 + q3q4);
            vz = q1q1 - q2q2 - q3q3 + q4q4;
            wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
            wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
            wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);  
 
            // Error is cross product between estimated direction and measured direction of gravity
            ex = (ay * vz - az * vy) + (my * wz - mz * wy);
            ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
            ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
            if (Ki > 0.0f)
            {
                eInt[0] += ex;      // accumulate integral error
                eInt[1] += ey;
                eInt[2] += ez;
            }
            else
            {
                eInt[0] = 0.0f;     // prevent integral wind up
                eInt[1] = 0.0f;
                eInt[2] = 0.0f;
            }
 
            // Apply feedback terms
            gx = gx + Kp * ex + Ki * eInt[0];
            gy = gy + Kp * ey + Ki * eInt[1];
            gz = gz + Kp * ez + Ki * eInt[2];
 
            // Integrate rate of change of quaternion
            pa = q[1];
            pb = q[2];
            pc = q[3];
            q[0] = q[0] + (-q[1] * gx - q[2] * gy - q[3] * gz) * (0.5f * deltat);
            q[1] = pa + (q[0] * gx + pb * gz - pc * gy) * (0.5f * deltat);
            q[2] = pb + (q[0] * gy - pa * gz + pc * gx) * (0.5f * deltat);
            q[3] = pc + (q[0] * gz + pa * gy - pb * gx) * (0.5f * deltat);
 
            // Normalise quaternion
            norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
            norm = 1.0f / norm;
            q[0] = q[0] * norm;
            q[1] = q[1] * norm;
            q[2] = q[2] * norm;
            q[3] = q[3] * norm;
 
        }


   yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);   
    pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
    roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
    pitch *= 180.0f / PI;
    yaw   *= 180.0f / PI; 
    yaw   -= 13.8f; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
    roll  *= 180.0f / PI;
