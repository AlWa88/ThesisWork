			/*
			if(counter==10){
				//readBMP(bmpRaw, fdBmp);
				//printf("BMP: %.3f, %.3f, %.3f\n", bmpRaw[0], bmpRaw[1], bmpRaw[2]);
				//printf("Ts: %i Counter: %i\n", ((millis() - start)/counter), counter);
				//start=millis();
				counter=1;
			}
			else{
				counter++;
			}
			*/
			// Calibration routine to get mean, variance and std_deviation
			/*if(counterCal==CALIBRATION-1){
				// Mean
				for (int i=0;i<CALIBRATION;i++){
					sum[0]+=accRawCal[0][i];
					sum[1]+=accRawCal[1][i];
					sum[2]+=accRawCal[2][i];
				}
				mean[0]=sum[0]/CALIBRATION;
				mean[1]=sum[1]/CALIBRATION;
				mean[2]=sum[2]/CALIBRATION;
				
				// Variance and std_deviation
				for (int i=0;i<CALIBRATION;i++){
					sum1[0]+=pow((accRawCal[0][i] - mean[0]), 2);
					sum1[1]+=pow((accRawCal[1][i] - mean[1]), 2);
					sum1[2]+=pow((accRawCal[2][i] - mean[2]), 2);
				}
				variance[0]=sum1[0]/CALIBRATION;
				variance[1]=sum1[1]/CALIBRATION;
				variance[2]=sum1[2]/CALIBRATION;
				std_deviation[0]=sqrt(variance[0]);
				std_deviation[1]=sqrt(variance[1]);
				std_deviation[2]=sqrt(variance[2]);
				printf("Mean: %.2f %.2f %.2f Variance: %.2f %.2f %.2f Std Deviation: %.2f %.2f %.2f\n", mean[0], mean[1], mean[2], variance[0], variance[1], variance[2], std_deviation[0], std_deviation[1], std_deviation[2]);
				counterCal=101;
			}
			else{
				accRawCal[0][counterCal]=accRaw[0];
				accRawCal[1][counterCal]=accRaw[1];
				accRawCal[2][counterCal]=accRaw[2];
				counterCal++;
			}
			*/
		
		
		
